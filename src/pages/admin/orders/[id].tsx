import AdminPageTitle from 'src/components/common/admin/AdminPageTitle';
import Empty from 'src/components/common/admin/Empty';
import ButtonLoader from 'src/components/common/shared/ButtonLoader';
import Picture from 'src/components/common/shared/Picture';
import Spinner from 'src/components/common/shared/Spinner';
import AdminAuthLayout from 'src/components/layouts/AdminAuthLayout';
import { useFetchData, useUpdateData } from 'src/hooks/useApi';
import { handleUpdateConfirm } from 'src/utils/confirmation';
import Head from 'next/head';
import { ReactElement } from 'react';

const OrderDetails = ({ id }: { id: string }) => {
	const { data: details, isLoading } = useFetchData(
		`/api/order/${id}`,
		id,
		1,
	);
	const { mutate: updateOrderStatus, isLoading: orderUpdating } =
		useUpdateData(id);

	const handleUpdateStatus = (OId: string) => {
		handleUpdateConfirm(
			'Are you sure ?',
			'Order status will be updated!',
		).then((result) => {
			if (result.isConfirmed) {
				updateOrderStatus({
					url: `/api/order/status/${OId}`,
					body: {},
				});
			}
		});
	};
	return (
		<>
			<Head>
				<title>Orders Details</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
			</Head>
			<div className="order-details">
				<div className="pb-8">
					<AdminPageTitle
						title={'Orders'}
						subtitle={`Admin / Product / Order / ${
							isLoading ? '' : details.status === 'success' && id
						}`}
					/>
				</div>
				{isLoading ? (
					<div className="bg-white p-10 rounded-lg col-span-2 h-[70vh] flex items-center justify-center">
						<Spinner />
					</div>
				) : details.status === 'success' ? (
					<div className="grid grid-cols-3 gap-8">
						<div className="bg-white p-10 rounded-lg col-span-2">
							<h4 className="capitalize text-black text-xl font-bold pb-8">
								Order Details:{' '}
								{details.status === 'success' && (
									<span className="text-green-400">{id}</span>
								)}
							</h4>
							<table className="w-full border-collapse">
								<thead className="bg-[#F0F1FF] border border-[#F0F1FF]">
									<tr>
										<th className="text-left py-3 pl-3">
											Image
										</th>
										<th className="text-left py-3">Name</th>
										<th className="text-left py-3">
											Price
										</th>
										<th className="text-center py-3">
											QTY
										</th>
										<th className="text-center py-3 pr-3">
											Total
										</th>
									</tr>
								</thead>
								<tbody>
									{details.data.ordersItems.map(
										(item: any, index: number) => (
											<tr
												className="border border-[#F0F1FF] mb-2"
												style={{
													marginBottom: '10px',
												}}
												key={index}
											>
												<td className="py-2 pl-3">
													<Picture
														link={`/uploads/${item.id.thumbnail}`}
														classList={
															'h-[45px] w-[45px] rounded-lg'
														}
														alt={''}
													/>
												</td>
												<td>{item.id.title}</td>
												<td>
													${item.price.toFixed(2)}
												</td>
												<td className="text-center">
													{item.qty}
												</td>
												<td className="text-center">
													$
													{(
														item.price * item.qty
													).toFixed(2)}
												</td>
											</tr>
										),
									)}
								</tbody>
							</table>
							<div className="grid grid-cols-3">
								<div className="col-span-2"></div>
								<ul className="order-details">
									<li className="flex items-center justify-between border-b py-4 pr-4">
										<span className="order-details-info-label">
											Subtotal
										</span>
										<span className="order-details-info-value">
											$
											{(
												details.data.total -
												details.data.shippingCost
											).toFixed(2)}
										</span>
									</li>
									<li className="flex items-center justify-between border-b py-4 pr-4">
										<span className="order-details-info-label">
											Shipping
										</span>
										<span className="order-details-info-value">
											$
											{details.data.shippingCost.toFixed(
												2,
											)}
										</span>
									</li>
									<li className="flex items-center justify-between py-4 pr-4">
										<span className="order-details-info-label">
											Discount
										</span>
										<span className="order-details-info-value">
											0
										</span>
									</li>
									<li className="border-t-2 pt-4 flex items-center justify-between pr-4">
										<span className="text-lg font-semibold text-[#333]">
											Total
										</span>
										<span className="text-lg font-semibold text-[#333]">
											${details.data.total.toFixed(2)}
										</span>
									</li>
								</ul>
							</div>
						</div>
						<div className="bg-white p-10 rounded-lg">
							<div className="flex items-center justify-between pb-8">
								<h4 className="capitalize text-black text-xl font-bold">
									User Info.
								</h4>
								<div className="">
									<select
										className={`${details.data.status} border-0 text-white focus:border-0 focus:ring-0 rounded-md text-sm`}
										defaultValue={details.data.status}
									>
										<option value="rocessing">
											Processing
										</option>
										<option value="packed">Packed</option>
										<option value="shipped">Shipped</option>
										<option value="delivered">
											Delivered
										</option>
									</select>
								</div>
							</div>
							<div className="flex flex-col gap-3 mb-4">
								<span className="text-base capitalize font-bold text-black">
									Name:
								</span>
								<span className="text-base capitalize font-medium text-[#333]">
									{`${details.data.firstName} ${details.data.lastName}`}
								</span>
							</div>
							<div className="flex flex-col gap-3 mb-2">
								<span className="text-base capitalize font-bold text-black">
									Email:
								</span>
								<span className="text-base font-medium text-[#333] underline">
									{details.data.email}
								</span>
							</div>
							<h4 className="capitalize text-black text-xl font-bold mt-10 mb-6">
								Shipping Info.
							</h4>
							<div className="flex items-center gap-2 mb-3">
								<span className="text-base capitalize font-bold text-black">
									Province:
								</span>
								<span className="text-base font-medium text-[#333]">
									{details.data.shipping.province}
								</span>
							</div>
							<div className="flex items-center gap-2 mb-3">
								<span className="text-base capitalize font-bold text-black">
									City:
								</span>
								<span className="text-base font-medium text-[#333]">
									{details.data.shipping.city}
								</span>
							</div>
							<div className="flex items-center gap-2 mb-3">
								<span className="text-base capitalize font-bold text-black">
									Area:
								</span>
								<span className="text-base font-medium text-[#333]">
									{details.data.shipping.area &&
										details.data.shipping.area}
								</span>
							</div>
							<div className="flex flex-col gap-3 mb-2">
								<span className="text-base capitalize font-bold text-black">
									Address:
								</span>
								<span className="text-base font-medium text-[#333] underline">
									{details.data.shipping.address}
								</span>
							</div>

							{
								<button
									className="submit__btn w-full mt-6 h-[53px]"
									onClick={() => handleUpdateStatus(id)}
									disabled={orderUpdating}
								>
									{orderUpdating ? (
										<ButtonLoader />
									) : (
										`Update Status`
									)}
								</button>
							}
						</div>
					</div>
				) : (
					<div className="bg-white p-10 rounded-lg">
						<Empty text={'Invalid Order'} />
					</div>
				)}
			</div>
		</>
	);
};

OrderDetails.getLayout = function getLayout(page: ReactElement) {
	return <AdminAuthLayout>{page}</AdminAuthLayout>;
};
export async function getServerSideProps(context: any) {
	const { id } = context.query;
	return {
		props: { id },
	};
}
export default OrderDetails;
