import dbConnect from 'src/backend/dbConnect';
import Product from 'src/backend/models/productmodel';
import AdminPageTitle from 'src/components/common/admin/AdminPageTitle';
import Empty from 'src/components/common/admin/Empty';
import CustomPagination from 'src/components/common/shared/CustomPagination';
import Picture from 'src/components/common/shared/Picture';
import Spinner from 'src/components/common/shared/Spinner';
import AdminAuthLayout from 'src/components/layouts/AdminAuthLayout';
import { useDeleteData, useFetchData } from 'src/hooks/useApi';
import { handleDeleteConfirm } from 'src/utils/confirmation';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { ReactElement, useState } from 'react';
import { FiEdit } from 'react-icons/fi';
import { RiDeleteBin5Line } from 'react-icons/ri';
import { toast } from 'react-toastify';
import Swal from 'sweetalert2';

type ProductShortInfo = {
	_id: string;
	title: string;
	thumbnail: string;
	regularPrice: number;
	salePrice: number;
	stock: number;
	badge: string;
	category: {
		title: string;
	};
	sold: number;
};

const Products = () => {
	const router = useRouter();
	const [page, setPage] = useState(1);
	const { mutate: deleteProduct } = useDeleteData('product');
	const { data: products, isLoading } = useFetchData(
		`/api/product/all?select=title,salePrice,regularPrice,thumbnail,stock,sold&page=${page}&limit=8`,
		'product',
		page,
	);

	const handleDeleteProduct = (id: string) => {
		handleDeleteConfirm('Are you sure ?', 'Product will be deleted !').then(
			(result) => {
				if (result.isConfirmed) {
					if (
						products.currentPage === products.pages &&
						products.data.length === 1
					) {
						deleteProduct(`/api/product/delete/${id}`);
						setPage(products.currentPage - 1);
					} else {
						deleteProduct(`/api/product/delete/${id}`);
					}
				}
			},
		);
	};

	return (
		<>
			<Head>
				<title>All Products</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
			</Head>
			<div id="admin-products">
				<div className="pb-8 flex items-center justify-between">
					<div>
						<AdminPageTitle
							title={'Products'}
							subtitle={'Admin / Product / Products'}
						/>
					</div>
					<div className="flex  items-center gap-3">
						<input
							type="text"
							placeholder="Search by name..."
							className="input__field"
						/>
						<select className="input__field">
							<option value="">Category</option>
							<option value="">Mens</option>
							<option value="">Women</option>
							<option value="">Fashion</option>
						</select>
						<button className="submit__btn">Search</button>
					</div>
				</div>
				<div className="bg-white p-10 rounded-lg">
					{isLoading ? (
						<div className="flex items-center justify-center h-[450px]">
							<Spinner />
						</div>
					) : products.data.length > 0 ? (
						<>
							<table className="w-full border-collapse">
								<thead className="bg-[#F0F1FF] border border-[#F0F1FF]">
									<tr>
										<th className="text-left py-3 pl-3">
											<input
												type="checkbox"
												name=""
												id=""
											/>
										</th>
										<th className="text-left py-3">
											Image
										</th>
										<th className="text-left py-3">Name</th>
										<th className="text-left py-3">
											Categories
										</th>
										<th className="text-left py-3">
											Sold &nbsp; &nbsp; &nbsp;&nbsp;
										</th>
										<th className="text-left py-3">
											Stock
										</th>
										<th className="text-left py-3">
											Sale Price
										</th>
										<th className="text-left py-3">
											Regular Price
										</th>
										<th className="text-center py-3 pr-3">
											Action
										</th>
									</tr>
								</thead>
								<tbody>
									{products.data.map(
										(
											item: ProductShortInfo,
											index: number,
										) => (
											<tr
												className="border border-[#F0F1FF] mb-2"
												style={{
													marginBottom: '10px',
												}}
												key={index}
											>
												<td className="pl-3">
													<input
														type="checkbox"
														name=""
														id=""
													/>
												</td>
												<td className="py-2">
													<Picture
														link={`/uploads/${item.thumbnail}`}
														classList={
															'h-[45px] w-[45px] rounded-lg'
														}
														alt={''}
													/>
												</td>
												<td className="capitalize">
													{item.title}
												</td>
												<td className="capitalize">
													{item.category
														? item.category.title
														: 'Uncategorized'}
												</td>
												<td>{item.sold}</td>
												<td>
													{item.stock
														? item.stock
														: 0}
												</td>
												<td>
													{item.salePrice &&
														`$${item.salePrice.toFixed(
															2,
														)}`}
												</td>
												<td>
													{item.regularPrice &&
														`$${item.regularPrice.toFixed(
															2,
														)}`}
												</td>
												<td className="pr-3">
													<div className="flex items-center gap-2 justify-center">
														<Link
															className="action__view"
															href={`/admin/product/${item._id}`}
														>
															<FiEdit className="text-[#000] text-base" />
														</Link>
														<button
															className="action__delete"
															onClick={() =>
																handleDeleteProduct(
																	item._id,
																)
															}
														>
															<RiDeleteBin5Line className="text-[#000] text-base" />
														</button>
													</div>
												</td>
											</tr>
										),
									)}
								</tbody>
							</table>
							<div className="flex items-center justify-end pt-8">
								<CustomPagination
									currentpage={products.currentPage}
									totalPage={products.pages}
									handler={setPage}
								/>
							</div>
						</>
					) : (
						<Empty text={'No Product Found'} />
					)}
				</div>
			</div>
		</>
	);
};
Products.getLayout = function getLayout(page: ReactElement) {
	return <AdminAuthLayout>{page}</AdminAuthLayout>;
};

export default Products;
