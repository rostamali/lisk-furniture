import AdminPageTitle from 'src/components/common/admin/AdminPageTitle';
import CustomPagination from 'src/components/common/shared/CustomPagination';
import Picture from 'src/components/common/shared/Picture';
import SelectPhotos from 'src/components/common/admin/SelectPhotos';
import AdminAuthLayout from 'src/components/layouts/AdminAuthLayout';
import { ReactElement, useEffect, useState } from 'react';
import { HiEye } from 'react-icons/hi';
import { RiDeleteBin5Line } from 'react-icons/ri';
import { useForm } from 'react-hook-form';
import {
	useCreateData,
	useDeleteData,
	useFetchData,
	useUpdateData,
} from 'src/hooks/useApi';
import Head from 'next/head';
import Spinner from 'src/components/common/shared/Spinner';
import Empty from 'src/components/common/admin/Empty';
import { FiEdit } from 'react-icons/fi';
import ButtonLoader from 'src/components/common/shared/ButtonLoader';
import { handleDeleteConfirm } from 'src/utils/confirmation';

type CategoryType = {
	_id: string;
	title: string;
	thumbnail: string;
	products: any[];
	parent: {
		_id: string;
		thumbnail: string;
		title: string;
	};
	description: string;
};

type UpdatCategoryType = {
	status: boolean;
	id: string;
	title: string;
	parent: string;
	description: string;
	thumbnail: string;
};

const CategoryPage = () => {
	const [page, setPage] = useState(1);
	const [edit, setEdit] = useState<UpdatCategoryType>({
		status: false,
		id: '',
		title: '',
		parent: '',
		description: '',
		thumbnail: '',
	});
	const [photo, setPhoto] = useState<string[]>([]);
	const { data: category, isLoading } = useFetchData(
		`/api/category/all?select=title,thumbnail,_id,products,parent,description&limit=7&page=${page}`,
		'category',
		page,
	);
	const { mutate: createCategory, isLoading: isCreateCategory } =
		useCreateData('/api/category/create', 'category');
	const { mutate: deleteCategory } = useDeleteData('category');
	const { mutate: updateCategory, isLoading: isUpdating } =
		useUpdateData('category');

	const {
		register,
		handleSubmit,
		formState: { errors },
		reset,
		setValue,
	} = useForm();

	const onSubmit = handleSubmit(async (data) => {
		if (edit.status) {
			data.thumbnail = photo[0];
			updateCategory({
				url: `/api/category/update/${edit.id}`,
				body: data,
			});
			setEdit({
				...edit,
				status: false,
			});
			setValue('title', '');
			setValue('parent', 'default');
			setValue('description', '');
		} else {
			data.thumbnail = photo[0];
			createCategory(data);
			reset();
			setPhoto([]);
		}
	});

	const handleDeleteCategory = (id: string) => {
		handleDeleteConfirm(
			'Are you sure ?',
			'Category will be deleted !',
		).then((result) => {
			if (result.isConfirmed) {
				if (
					category.currentPage === category.pages &&
					category.data.length === 1
				) {
					deleteCategory(`/api/category/delete/${id}`);
					setPage(category.pages - 1);
				} else {
					deleteCategory(`/api/category/delete/${id}`);
				}
			}
		});
	};
	useEffect(() => {
		if (edit.status) {
			setValue('title', edit.title);
			setValue('parent', edit.parent ? edit.parent : 'default');
			setValue('description', edit.description ? edit.description : '');
		}
	}, [edit, setValue, setEdit]);

	return (
		<>
			<Head>
				<title>Product Categorys</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
			</Head>
			<div className="product-category">
				<div className="pb-8 flex items-center justify-between">
					<div>
						<AdminPageTitle
							title={'Categorys'}
							subtitle={'Admin / Product / Category'}
						/>
					</div>
					<div className="flex  items-center gap-3">
						<input
							type="text"
							placeholder="Search by name..."
							className="input__field"
						/>
						<button className="submit__btn">Search</button>
					</div>
				</div>
				<div className="">
					<div className="grid grid-cols-3 gap-8">
						<div className="bg-white p-10 rounded-lg flex flex-col gap-4">
							<form onSubmit={onSubmit}>
								<div className="input__group">
									<label
										htmlFor="title"
										className="input__label"
									>
										Name
									</label>
									<input
										id="title"
										type="text"
										className="input__field"
										{...register('title')}
									/>
								</div>
								<div className="input__group mt-3">
									<label
										className="input__label"
										htmlFor="parent"
									>
										Parent
									</label>
									<select
										id="parent"
										{...register('parent')}
										className="input__field"
									>
										<option value={'default'}>
											Default
										</option>
										{!isLoading &&
										category.data.length > 0 ? (
											category.data.map(
												(
													item: CategoryType,
													index: number,
												) => (
													<option
														value={item._id}
														key={index}
													>
														{item.title}
													</option>
												),
											)
										) : (
											<option value={'default'}>
												Default
											</option>
										)}
									</select>
								</div>
								<div className="flex items-end gap-6 py-5">
									<div className="">
										<Picture
											link={
												photo.length > 0
													? `/uploads/${photo[0]}`
													: edit.status
													? edit.thumbnail
														? `/uploads/${edit.thumbnail}`
														: '/uploads/placeholder.png'
													: '/uploads/placeholder.png'
											}
											classList={
												'h-[120px] w-[120px] border-2 border-orange-dark rounded-full'
											}
											alt={'Category Thumbnail'}
										/>
									</div>
									<SelectPhotos
										btnText={'Upload Thumbnail'}
										handler={setPhoto}
										single={true}
										defaultVal={photo}
										btnClass={''}
									/>
								</div>
								<div className="input__group">
									<label
										htmlFor="description"
										className="input__label"
									>
										Description
									</label>
									<textarea
										id="description"
										className="border-[#cbcdd5] ring-0 focus:ring-0 focus:border-orange-dark h-[120px]"
										{...register('description')}
									></textarea>
								</div>
								{edit.status ? (
									<button
										className="submit__btn w-full mt-6 h-[50px]"
										disabled={isUpdating}
									>
										{isUpdating ? (
											<ButtonLoader />
										) : (
											'Update Now'
										)}
									</button>
								) : (
									<button
										className="submit__btn w-full mt-6 h-[50px]"
										disabled={isCreateCategory}
									>
										{isCreateCategory ? (
											<ButtonLoader />
										) : (
											'New Category'
										)}
									</button>
								)}
							</form>
						</div>
						<div className="bg-white p-10 rounded-lg col-span-2">
							{isLoading ? (
								<div className="flex h-[60vh] items-center justify-center">
									<Spinner />
								</div>
							) : category.data.length > 0 ? (
								<>
									<table className="w-full border-collapse">
										<thead className="bg-[#F0F1FF] border border-[#F0F1FF]">
											<tr>
												<th className="text-left py-3 pl-3">
													<input
														type="checkbox"
														name=""
														id=""
													/>
												</th>
												<th className="text-left py-3">
													Image
												</th>
												<th className="text-left py-3">
													Name
												</th>
												<th className="text-left py-3">
													Parent
												</th>
												<th className="text-left py-3">
													Qty
												</th>
												<th className="text-center py-3 pr-3">
													Action
												</th>
											</tr>
										</thead>
										<tbody>
											{category.data.map(
												(
													item: CategoryType,
													index: number,
												) => (
													<tr
														className="border border-[#F0F1FF] mb-2"
														style={{
															marginBottom:
																'10px',
														}}
														key={index}
													>
														<td className="pl-3">
															<input
																type="checkbox"
																name=""
																id=""
															/>
														</td>
														<td className="py-2">
															<Picture
																link={
																	item.thumbnail
																		? `/uploads/${item.thumbnail}`
																		: '/uploads/placeholder.png'
																}
																classList={
																	'h-[45px] w-[45px] rounded-lg'
																}
																alt={''}
															/>
														</td>
														<td className="capitalize">
															{item.title}
														</td>
														<td>
															{item.parent &&
																item.parent
																	.title}
														</td>
														<td>
															{item.products
																.length
																? item.products
																		.length
																: 0}
														</td>
														<td className="pr-3">
															<div className="flex items-center gap-2 justify-center">
																<button
																	className="action__view"
																	onClick={() =>
																		setEdit(
																			{
																				status: true,
																				id: item._id,
																				title: item.title,
																				thumbnail:
																					item.thumbnail,
																				parent: item.parent
																					? item
																							.parent
																							._id
																					: 'default',
																				description:
																					item.description,
																			},
																		)
																	}
																>
																	<FiEdit className="text-[#000] text-base" />
																</button>
																<button
																	className="action__delete"
																	onClick={() =>
																		handleDeleteCategory(
																			item._id,
																		)
																	}
																>
																	<RiDeleteBin5Line className="text-[#000] text-base" />
																</button>
															</div>
														</td>
													</tr>
												),
											)}
										</tbody>
									</table>
									{category.pages > 1 && (
										<div className="flex items-center justify-end pt-8">
											<CustomPagination
												currentpage={
													category.currentPage
												}
												totalPage={category.pages}
												handler={setPage}
											/>
										</div>
									)}
								</>
							) : (
								<Empty text={'No Category Exist'} />
							)}
						</div>
					</div>
				</div>
			</div>
		</>
	);
};
CategoryPage.getLayout = function getLayout(page: ReactElement) {
	return <AdminAuthLayout>{page}</AdminAuthLayout>;
};

export default CategoryPage;
