import dbConnect from 'src/backend/dbConnect';
import Category from 'src/backend/models/categorymodel';
import AdminPageTitle from 'src/components/common/admin/AdminPageTitle';
import AdminAuthLayout from 'src/components/layouts/AdminAuthLayout';
import Head from 'next/head';
import { ReactElement } from 'react';
import { ProductCategory } from './new-product';
import { NextPageContext } from 'next';
import { useFetchData } from 'src/hooks/useApi';
import Spinner from 'src/components/common/shared/Spinner';
import Empty from 'src/components/common/admin/Empty';
import dynamic from 'next/dynamic';

const UpdateProductForm = dynamic(
	() => import('src/components/common/admin/UpdateProductForm'),
	{
		ssr: false,
	},
);

const ProductUpdate = ({
	category,
	id,
}: {
	category: ProductCategory[];
	id: string;
}) => {
	const { data: product, isLoading } = useFetchData(
		`/api/product/single/${id}`,
		id,
		1,
	);
	return (
		<>
			<Head>
				<title>Update Product Product</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
			</Head>
			<div className="update-product">
				<div className="pb-8">
					<AdminPageTitle
						title={'Add Product'}
						subtitle={'Admin / Product / New Product'}
					/>
				</div>
				<>
					{isLoading ? (
						<div className="flex items-center justify-center bg-white rounded-md p-10 h-[70vh]">
							<Spinner />
						</div>
					) : product.status === 'success' ? (
						<div className="create-product">
							<UpdateProductForm
								category={category}
								product={product.data}
							/>
						</div>
					) : (
						<div className="bg-white rounded-md p-10">
							<Empty text={'Invalid Product ID'} />
						</div>
					)}
				</>
			</div>
		</>
	);
};
ProductUpdate.getLayout = function getLayout(page: ReactElement) {
	return <AdminAuthLayout>{page}</AdminAuthLayout>;
};

export async function getServerSideProps(context: NextPageContext) {
	await dbConnect();
	const data = await Category.find({}).select('title _id');
	const { id } = context.query;
	return {
		props: {
			category: JSON.parse(JSON.stringify(data)),
			id,
		},
	};
}
export default ProductUpdate;
