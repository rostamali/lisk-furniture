import { ReactElement, useState } from 'react';
import Lightbox from 'react-image-lightbox';
import 'react-image-lightbox/style.css';
import { HiEye, HiOutlineTrash, HiLink } from 'react-icons/hi';
import { BiImageAdd } from 'react-icons/bi';
import AdminPageTitle from 'src/components/common/admin/AdminPageTitle';
import ImageUploader from 'src/components/common/admin/ImageUploader';
import { Modal } from 'flowbite-react';
import Picture from 'src/components/common/shared/Picture';
import AdminAuthLayout from 'src/components/layouts/AdminAuthLayout';
import { useDeleteData, useFetchData } from 'src/hooks/useApi';
import { ImagesType } from 'src/types';
import Spinner from 'src/components/common/shared/Spinner';
import Empty from 'src/components/common/admin/Empty';
import Head from 'next/head';
import CustomPagination from 'src/components/common/shared/CustomPagination';
import { handleDeleteConfirm } from 'src/utils/confirmation';
import { toast } from 'react-toastify';
const Gallery = () => {
	const [showUploadImage, setShowUploadImage] = useState(false);
	const [page, setPage] = useState(1);
	const [isOpen, setIsOpen] = useState({
		photoIndex: 0,
		open: false,
	});

	const { data: images, isLoading } = useFetchData(
		`/api/file/images?page=${page}&limit=6`,
		'images',
		page,
	);
	const { mutate: deleteImage } = useDeleteData('images');
	const handleDeleteImage = (name: string) => {
		handleDeleteConfirm('Are you sure ?', 'Image will be deleted !').then(
			(result) => {
				if (result.isConfirmed) {
					deleteImage(`/api/file/delete/${name}`);
				}
			},
		);
	};

	const handleLinkCopy = (link: string) => {
		navigator.clipboard.writeText(`/uploads/${link}`);
		toast.success('Link Copied');
	};

	return (
		<>
			<Head>
				<title>Gallery - Admin Dashboard</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
			</Head>
			<div id="photo-gallery">
				<div className="flex items-center justify-between pb-8">
					<div>
						<AdminPageTitle
							title={'Gallery'}
							subtitle={'Admin / Gallery'}
						/>
					</div>
					<button
						className="submit__btn flex items-center gap-3"
						onClick={() => setShowUploadImage(true)}
					>
						<BiImageAdd className="text-xl" />
						Upload New
					</button>
				</div>
				<div className="bg-white p-10 rounded-lg">
					{isLoading ? (
						<div className="h-[70vh] flex items-center justify-center">
							<Spinner />
						</div>
					) : images.data.length > 0 ? (
						<>
							<div className="grid grid-cols-3 gap-8">
								{images.data.map(
									(item: ImagesType, index: number) => (
										<div
											className="photo-wrapper relative overflow-hidden cursor-pointer group rounded-2xl border"
											key={index}
										>
											<Picture
												link={`/uploads/${item.name}`}
												classList={
													'w-full h-80 rounded-2xl'
												}
												alt={''}
											/>
											<div className="photo-overlay absolute top-0 left-0 bg-[#24282857] w-full h-full items-center justify-center gap-3 duration-300 opacity-0 hidden group-hover:opacity-100 group-hover:flex">
												<button
													className="bg-orange-dark h-9 w-9 flex items-center justify-center rounded-full duration-300 hover:scale-[1.2]"
													onClick={() =>
														setIsOpen({
															open: true,
															photoIndex: index,
														})
													}
												>
													<HiEye className="text-xl text-[#F0F1FF]" />
												</button>
												<button
													className="bg-orange-dark h-9 w-9 flex items-center justify-center rounded-full duration-300 hover:scale-[1.2]"
													onClick={() =>
														handleDeleteImage(
															item.name,
														)
													}
												>
													<HiOutlineTrash className="text-xl text-[#F0F1FF]" />
												</button>
												<button
													className="bg-orange-dark h-9 w-9 flex items-center justify-center rounded-full duration-300 hover:scale-[1.2]"
													onClick={() =>
														handleLinkCopy(
															item.name,
														)
													}
												>
													<HiLink className="text-xl text-[#F0F1FF]" />
												</button>
											</div>
										</div>
									),
								)}
							</div>
							{images.pages > 1 && (
								<div className="pt-10">
									<CustomPagination
										currentpage={images.currentPage}
										totalPage={images.pages}
										handler={setPage}
									/>
								</div>
							)}
						</>
					) : (
						<Empty text={'No Image Found'} />
					)}
				</div>
			</div>
			{isOpen.open && (
				<Lightbox
					mainSrc={`/uploads/${images.data[isOpen.photoIndex].name}`}
					nextSrc={`/uploads/${
						images.data[
							(isOpen.photoIndex + 1) % images.data.length
						].name
					}`}
					prevSrc={`/uploads/${
						images.data[
							(isOpen.photoIndex + images.data.length - 1) %
								images.data.length
						].name
					}`}
					onCloseRequest={() => setIsOpen({ ...isOpen, open: false })}
					onMovePrevRequest={() =>
						setIsOpen({
							...isOpen,
							photoIndex:
								(isOpen.photoIndex + images.data.length - 1) %
								images.data.length,
						})
					}
					onMoveNextRequest={() =>
						setIsOpen({
							...isOpen,
							photoIndex:
								(isOpen.photoIndex + 1) % images.data.length,
						})
					}
				/>
			)}
			<div className="image-upload-modal">
				<Modal
					show={showUploadImage}
					size="md"
					popup={true}
					onClose={() => setShowUploadImage(false)}
				>
					<Modal.Header />
					<Modal.Body className="flex flex-col gap-5 items-center justify-center pb-10">
						<ImageUploader />
					</Modal.Body>
				</Modal>
			</div>
		</>
	);
};

Gallery.getLayout = function getLayout(page: ReactElement) {
	return <AdminAuthLayout>{page}</AdminAuthLayout>;
};
export default Gallery;
