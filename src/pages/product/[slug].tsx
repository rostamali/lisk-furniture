import Picture from 'src/components/common/shared/Picture';
import ProductGallery from 'src/components/common/shared/ProductGallery';
import SimilarProduct from 'src/components/product/SimilarProduct';
import Spinner from 'src/components/common/shared/Spinner';
import DefaultLayout from 'src/components/layouts/DefaultLayout';
import { useFetchData } from 'src/hooks/useApi';
import { RootState } from 'src/redux/store';
import { NextPageContext } from 'next';
import Head from 'next/head';
import React, { ReactElement } from 'react';
import { FaHeart, FaRegHeart } from 'react-icons/fa';
import { MdOutlineProductionQuantityLimits } from 'react-icons/md';
import { useDispatch, useSelector } from 'react-redux';
import ProductTab from 'src/components/product/ProductTab';
import { addToWishlist } from 'src/redux/slices/wishlistSlice';
import Ratings from 'src/components/common/shared/Ratings';
import { addToCart } from 'src/redux/slices/cartSlice';
import Link from 'next/link';

const SingleProduct = ({ slug }: { slug: string }) => {
	const { data: product, isLoading } = useFetchData(
		`/api/product/single/details/${slug}`,
		slug,
		1,
	);
	const dispatch = useDispatch();
	const { wishlistItem } = useSelector((state: RootState) => state.wishlist);
	const { cartItem } = useSelector((state: RootState) => state.cart);

	return (
		<>
			<Head>
				<title>Single Product</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<div id="single-product" className="pt-20 border-b">
				{isLoading ? (
					<div className="flex h-[40vh] items-center justify-center">
						<Spinner />
					</div>
				) : product.status === 'success' ? (
					<>
						<div className="container mx-auto pb-20">
							<div className="md:grid md:grid-cols-2 lg:gap-20 md:gap-10">
								<div className="product-galler__wrapper">
									{product.data.gallery.length > 0 ? (
										<ProductGallery
											images={[
												product.data.thumbnail,
												...product.data.gallery,
											]}
										/>
									) : (
										<Picture
											link={`/uploads/${product.data.thumbnail}`}
											classList={
												'w-[570px] h-[500px] border'
											}
											alt={product.data.title}
										/>
									)}
								</div>
								<div className="product-details font-mulish">
									<h2 className="product-title text-black lg:text-3xl text-2xl font-bold mb-4">
										{product.data.title}
									</h2>
									<div className="flex items-center justify-between">
										<div className="prices flex items-center gap-3">
											{product.data.regularPrice && (
												<p className="regular-price line-through font-medium text-gray-dark text-sm">
													$
													{product.data.regularPrice.toFixed(
														2,
													)}
												</p>
											)}
											<p className="sale-price text-orange-dark text-lg font-medium">
												$
												{product.data.salePrice.toFixed(
													2,
												)}
											</p>
										</div>
										<div className="ratings flex items-center">
											<div className="-mt-1">
												<Ratings
													rating={product.reviewStat}
													size={'14px'}
												/>
											</div>
											<p className="short-subtitle ml-2">
												{product.totalRatings} reviews
											</p>
										</div>
									</div>
									<hr className="block border-0 border-b-2 my-6" />
									<p className="short-subtitle">
										The minimal design of the Nesta Planter
										from Umbra will accentuate any living
										space.Includes white speckled ceramic
										vase and metal wire frame. Designed by
										Sung Wook Park.
									</p>
									{/* Product Action */}
									<div className="cart-action font-mulish border-2 border-gray-light p-3 sm:p-6 rounded-md mt-8">
										<div className="flex lg:gap-10 gap-4 justify-between">
											<div className="cart-action__btn flex items-center">
												<div className="cart-qty sm:ml-5">
													{cartItem.find(
														(item) =>
															item._id ===
															product.data._id,
													) ? (
														<Link
															href="/cart"
															className="bg-orange-dark text-white px-4 md:px-6 font-semibold text-xs md:text-lg uppercase rounded-md h-12 flex items-center"
														>
															View Cart
														</Link>
													) : (
														<button
															className="bg-orange-dark text-white px-4 md:px-6 font-semibold text-sm md:text-lg uppercase rounded-md h-12"
															onClick={() =>
																dispatch(
																	addToCart(
																		product.data,
																	),
																)
															}
														>
															Add to Cart
														</button>
													)}
												</div>
											</div>
											<div className="flex items-center">
												{wishlistItem.find(
													(item) =>
														item._id ===
														product.data._id,
												) ? (
													<FaHeart className="text-3xl text-[#D9304F]" />
												) : (
													<button
														onClick={() =>
															dispatch(
																addToWishlist(
																	product.data,
																),
															)
														}
														type="button"
													>
														<FaRegHeart className="text-3xl text-black" />
													</button>
												)}

												<span
													className="bg-gray-light h-8 mx-6"
													style={{
														width: '2px',
													}}
												></span>
												<button>
													<Picture
														link={
															'/assets/icons/share.svg'
														}
														alt={'Share icon'}
														classList={'h-8 w-8'}
													/>
												</button>
											</div>
										</div>
									</div>

									{/* Product Meta */}
									<div className="product-meta mt-8">
										<div className="product-meta__item font-mulish mb-2">
											<span className="product-meta__label text-black text-sm font-bold">
												Availablity:
											</span>
											<span
												className={`product-meta__value text-sm text-gray-dark font-semibold ml-6`}
											>
												{product.data.stock > 3
													? 'In Stock'
													: 'Out of stock'}
											</span>
										</div>
										<div className="product-meta__item font-mulish mb-2">
											<span className="product-meta__label text-black text-sm font-bold">
												SKU:
											</span>
											<span
												className={`product-meta__value text-sm text-gray-dark font-semibold ml-6 uppercase`}
											>
												{product.data.stockUnit}
											</span>
										</div>
										<div className="product-meta__item font-mulish mb-2">
											<span className="product-meta__label text-black text-sm font-bold">
												Categories:
											</span>
											<span
												className={`product-meta__value text-sm text-gray-dark font-semibold ml-6`}
											>
												{product.data.category
													? product.data.category
															.title
													: 'Uncategorized'}
											</span>
										</div>
									</div>
								</div>
							</div>
						</div>
						<ProductTab
							description={
								product.data.description
									? product.data.description
									: ''
							}
							id={product.data._id}
							reviews={product.reviews && product.reviews}
						/>
						{product.similarProduct.length === 4 && (
							<SimilarProduct products={product.similarProduct} />
						)}
					</>
				) : (
					<div className="flex flex-col items-center">
						<div className="box-shadow h-24 w-24 flex items-center justify-center rounded-full">
							<MdOutlineProductionQuantityLimits className="text-5xl text-black" />
						</div>

						<h2 className="text-black md:text-4xl font-mulish text-xl font-bold my-8">
							No Product Found
						</h2>
					</div>
				)}
			</div>
		</>
	);
};

SingleProduct.getLayout = function getLayout(page: ReactElement) {
	return <DefaultLayout>{page}</DefaultLayout>;
};

export async function getServerSideProps(context: NextPageContext) {
	const { slug } = context.query;
	return {
		props: {
			slug,
		},
	};
}
export default SingleProduct;
